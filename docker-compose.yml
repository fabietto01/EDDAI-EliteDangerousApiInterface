version: "2.0"
services:
    rabbitmq:
        container_name: rabbitmq
        image: rabbitmq:3.11.13-management
        hostname: rabbitmq
        environment:
            TZ: UTC
            RABBITMQ_DEFAULT_USER: ${RABBITMQ_DEFAULT_USER}
            RABBITMQ_DEFAULT_PASS: ${RABBITMQ_DEFAULT_PASS}
        volumes:
            - rabbitedvol:/var/lib/rabbitmq
        ports:
            - "5672:5672"
            - "15672:15672"
        restart: always
    redis_result_backend:
        container_name: redis_result_backend
        image: redis:6.2.12
        environment:
            TZ: UTC
        command: redis-server --requirepass ${REDIS_RESULT_BACKEND_PASSWORD}
        volumes:
            - redisresultbackendvol:/data
        ports:
            - "6379:6379"
        restart: always
    redis_cache:
        container_name: redis_cache
        image: redis:6.2.12
        environment:
            TZ: UTC
        command: redis-server --requirepass ${REDIS_CACHE_PASSWORD}
        volumes:
            - rediscachevol:/data
        ports:
            - "6380:6379"
        restart: always
    postgis:
        container_name: postGIS
        image: postgis/postgis:16-3.4
        environment:
            TZ: UTC
            POSTGRES_USER: ${POSTGIS_USER}
            POSTGRES_PASSWORD: ${POSTGIS_PASSWORD}
            POSTGRES_DB: ${POSTGIS_DB}
        volumes:
            - postgisvol:/var/lib/postgresql/data
        ports:
            - "5432:5432"
        restart: always
        command: postgres -c 'max_connections=10000' -c 'shared_buffers=250MB'
    postgressql:
        container_name: postgres
        image: postgres
        environment:
            TZ: UTC
            POSTGRES_USER: ${POSTGRES_USER}
            POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
            POSTGRES_DB: ${POSTGRES_DB}
        volumes:
            - postgresvol:/var/lib/postgresql/data
        ports:
            - "5433:5432"
        restart: always
        command: postgres -c 'max_connections=10000' -c 'shared_buffers=250MB'
    django:
        build:
            context: .
            dockerfile: Dockerfile
        container_name: django
        command: gunicorn eddai.asgi:application --bind
        volumes:
            - .:/code
        ports:
            - "8000:8000"
        depends_on:
            - rabbitmq
            - redis_result_backend
            - redis_cache
            - postgis
            - postgressql
    celery_worker_task:
        build:
            context: .
            dockerfile: Dockerfile
        container_name: celery_worker_task
        command: celery -A eddai_EliteDangerousApiInterface worker -l info -Q task -n WorkerTasck@%h -P gevent -c 100
        volumes:
            - .:/code
        depends_on:
            - rabbitmq
            - redis_result_backend
            - redis_cache
            - postgis
            - postgressql
    celery_worker_admin:
        build:
            context: .
            dockerfile: Dockerfile
        container_name: celery_worker_admin
        command: celery -A eddai_EliteDangerousApiInterface worker -l info -Q admin -n WorkerAdmin@%h -P gevent -c 100
        volumes:
            - .:/code
        depends_on:
            - rabbitmq
            - redis_result_backend
            - redis_cache
            - postgis
            - postgressql
    celery_worker_eddn:
        build:
            context: .
            dockerfile: Dockerfile
        container_name: celery_worker_eddn
        command: celery -A eddai_EliteDangerousApiInterface worker -l info -Q eddn -n WorkerEddn@%h -P gevent -c 100
        volumes:
            - .:/code
        depends_on:
            - rabbitmq
            - redis_result_backend
            - redis_cache
            - postgis
            - postgressql
    celery_beat:
        build:
            context: .
            dockerfile: Dockerfile
        container_name: celery_beat
        command: celery -A eddai_EliteDangerousApiInterface beat -l info
        volumes:
            - .:/code
        depends_on:
            - rabbitmq
            - redis_result_backend
            - redis_cache
            - postgis
            - postgressql
    eddn:
        build:
            context: .
            dockerfile: Dockerfile
        container_name: eddn
        command: python eddn
        volumes:
            - .:/code
        depends_on:
            - rabbitmq
            - redis_result_backend
            - redis_cache
            - postgis
            - postgressql

volumes:
    rabbitedvol:
    redisresultbackendvol:
    rediscachevol:
    postgisvol:
    postgresvol: