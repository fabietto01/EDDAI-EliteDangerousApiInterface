# Generated by Django 4.1 on 2022-09-25 18:12

import django.core.validators
from django.db import migrations, models
import django.db.models.deletion


class Migration(migrations.Migration):

    dependencies = [
        ('ed_system', '0004_alter_system_population'),
        ('ed_body', '0002_startype__eddn'),
    ]

    operations = [
        migrations.CreateModel(
            name='BaseBody',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=255, verbose_name='name')),
                ('bodyID', models.PositiveIntegerField(verbose_name='bodyID')),
                ('distance', models.FloatField(help_text='distance from the stary center', validators=[django.core.validators.MinValueValidator(0, 'the distance cannot be less than 0')], verbose_name='distance')),
                ('radius', models.FloatField(help_text='radius of the body', validators=[django.core.validators.MinValueValidator(0, 'the radius cannot be less than 0')], verbose_name='radius')),
                ('surfaceTemperature', models.FloatField(validators=[django.core.validators.MinValueValidator(0, 'the surface temperature cannot be less than 0')], verbose_name='surface temperature')),
                ('eccentricity', models.FloatField(help_text='eccentricity of the orbit', validators=[django.core.validators.MinValueValidator(0, 'the eccentricity cannot be less than 0'), django.core.validators.MaxValueValidator(1, 'the eccentricity cannot be greater than 1')], verbose_name='eccentricity')),
                ('orbitalInclination', models.FloatField(help_text='orbital inclination of the body', validators=[django.core.validators.MinValueValidator(-360, 'the orbital inclination cannot be less than -360'), django.core.validators.MaxValueValidator(360, 'the orbital inclination cannot be greater than 360')], verbose_name='orbital inclination')),
                ('orbitalPeriod', models.FloatField(help_text='orbital period of the body in days', validators=[django.core.validators.MinValueValidator(0, 'the orbital period cannot be less than 0')], verbose_name='orbital period')),
                ('periapsis', models.FloatField(help_text='periapsis of the body', verbose_name='periapsis')),
                ('semiMajorAxis', models.FloatField(help_text='semi major axis of the orbit', validators=[django.core.validators.MinValueValidator(0, 'the semi major axis cannot be less than 0')], verbose_name='semi major axis')),
                ('axialTilt', models.FloatField(help_text='axial tilt of the body', validators=[django.core.validators.MinValueValidator(-360, 'the axial tilt cannot be less than -360'), django.core.validators.MaxValueValidator(360, 'the axial tilt cannot be greater than 360')], verbose_name='axial tilt')),
                ('rotationPeriod', models.FloatField(help_text='rotation period of the body in seconds', validators=[django.core.validators.MinValueValidator(0, 'the rotation period cannot be less than 0')], verbose_name='rotation period')),
                ('updated', models.DateTimeField(auto_now=True)),
                ('system', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='%(app_label)s_%(class)s_related', related_query_name='%(app_label)s_%(class)ss', to='ed_system.system', verbose_name='system')),
            ],
            options={
                'verbose_name': 'body',
                'verbose_name_plural': 'bodies',
            },
        ),
        migrations.CreateModel(
            name='Star',
            fields=[
                ('basebody_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='ed_body.basebody')),
                ('absoluteMagnitude', models.FloatField(validators=[django.core.validators.MinValueValidator(0, 'the absolute magnitude cannot be less than 0')], verbose_name='absolute magnitude')),
                ('age', models.FloatField(help_text='age in millions of years', validators=[django.core.validators.MinValueValidator(0, 'the age cannot be less than 0')], verbose_name='age')),
                ('stellarMass', models.FloatField(help_text="mass as multiple of Sol's mass", validators=[django.core.validators.MinValueValidator(0, 'the stellar mass cannot be less than 0')], verbose_name='stellar mass')),
                ('subclass', models.IntegerField(validators=[django.core.validators.MinValueValidator(0, 'the subclass cannot be less than 0'), django.core.validators.MaxValueValidator(9, 'the subclass cannot be greater than 9')], verbose_name='subclass')),
                ('luminosity', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, related_name='%(app_label)s_%(class)s_related', related_query_name='%(app_label)s_%(class)ss', to='ed_body.starluminosity', verbose_name='luminosity')),
                ('starType', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, related_name='%(app_label)s_%(class)s_related', related_query_name='%(app_label)s_%(class)ss', to='ed_body.startype', verbose_name='star type')),
            ],
            options={
                'verbose_name': 'star',
                'verbose_name_plural': 'stars',
            },
            bases=('ed_body.basebody',),
        ),
        migrations.AddIndex(
            model_name='basebody',
            index=models.Index(fields=['system'], name='ed_body_bas_system__c8c1e4_idx'),
        ),
        migrations.AddIndex(
            model_name='basebody',
            index=models.Index(fields=['bodyID'], name='ed_body_bas_bodyID_f8396f_idx'),
        ),
        migrations.AddConstraint(
            model_name='basebody',
            constraint=models.UniqueConstraint(fields=('name', 'system'), name='unique_body_in_system'),
        ),
        migrations.AddConstraint(
            model_name='basebody',
            constraint=models.UniqueConstraint(fields=('bodyID', 'system'), name='unique_bodyID_in_system'),
        ),
    ]
